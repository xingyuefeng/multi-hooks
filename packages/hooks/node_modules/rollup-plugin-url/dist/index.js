'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var rollupPluginutils = require('rollup-pluginutils');
var mkdirp = _interopDefault(require('mkdirp'));
var mime = _interopDefault(require('mime'));
var crypto = _interopDefault(require('crypto'));
var path = _interopDefault(require('path'));
var fs = _interopDefault(require('fs'));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

const defaultInclude = ["**/*.svg", "**/*.png", "**/*.jpg", "**/*.gif"];
function url(options = {}) {
  const _options$limit = options.limit,
        limit = _options$limit === void 0 ? 14 * 1024 : _options$limit,
        _options$include = options.include,
        include = _options$include === void 0 ? defaultInclude : _options$include,
        exclude = options.exclude,
        _options$publicPath = options.publicPath,
        publicPath = _options$publicPath === void 0 ? "" : _options$publicPath,
        _options$emitFiles = options.emitFiles,
        emitFiles = _options$emitFiles === void 0 ? true : _options$emitFiles,
        _options$fileName = options.fileName,
        fileName = _options$fileName === void 0 ? "[hash][extname]" : _options$fileName;
  const filter = rollupPluginutils.createFilter(include, exclude);
  const copies = Object.create(null);
  return {
    load(id) {
      if (!filter(id)) {
        return null;
      }

      return Promise.all([promise(fs.stat, id), promise(fs.readFile, id)]).then(([stats, buffer]) => {
        let data;

        if (limit && stats.size > limit || limit === 0) {
          const hash = crypto.createHash("sha1").update(buffer).digest("hex").substr(0, 16);
          const ext = path.extname(id);
          const name = path.basename(id, ext); // Determine the directory name of the file based
          // on either the relative path provided in options,
          // or the parent directory

          const relativeDir = options.sourceDir ? path.relative(options.sourceDir, path.dirname(id)) : path.dirname(id).split(path.sep).pop(); // Generate the output file name based on some string
          // replacement parameters

          const outputFileName = fileName.replace(/\[hash\]/g, hash).replace(/\[extname\]/g, ext).replace(/\[dirname\]/g, `${relativeDir}/`).replace(/\[name\]/g, name);
          data = `${publicPath}${outputFileName}`;
          copies[id] = outputFileName;
        } else {
          const mimetype = mime.getType(id);
          const isSVG = mimetype === "image/svg+xml";
          data = isSVG ? encodeSVG(buffer) : buffer.toString("base64");
          const encoding = isSVG ? "" : ";base64";
          data = `data:${mimetype}${encoding},${data}`;
        }

        return `export default "${data}"`;
      });
    },

    generateBundle: function () {
      var _write = _asyncToGenerator(function* (outputOptions) {
        // Allow skipping saving files for server side builds.
        if (!emitFiles) return;
        const base = options.destDir || outputOptions.dir || path.dirname(outputOptions.file);
        yield promise(mkdirp, base);
        return Promise.all(Object.keys(copies).map(
        /*#__PURE__*/
        function () {
          var _ref = _asyncToGenerator(function* (name) {
            const output = copies[name]; // Create a nested directory if the fileName pattern contains
            // a directory structure

            const outputDirectory = path.join(base, path.dirname(output));
            yield promise(mkpath, outputDirectory);
            return copy(name, path.join(base, output));
          });

          return function (_x2) {
            return _ref.apply(this, arguments);
          };
        }()));
      });

      function write(_x) {
        return _write.apply(this, arguments);
      }

      return write;
    }()
  };
}

function promise(fn, ...args) {
  return new Promise((resolve, reject) => fn(...args, (err, res) => err ? reject(err) : resolve(res)));
}

function copy(src, dest) {
  return new Promise((resolve, reject) => {
    const read = fs.createReadStream(src);
    read.on("error", reject);
    const write = fs.createWriteStream(dest);
    write.on("error", reject);
    write.on("finish", resolve);
    read.pipe(write);
  });
} // https://github.com/filamentgroup/directory-encoder/blob/master/lib/svg-uri-encoder.js


function encodeSVG(buffer) {
  return encodeURIComponent(buffer.toString("utf-8") // strip newlines and tabs
  .replace(/[\n\r]/gmi, "").replace(/\t/gmi, " ") // strip comments
  .replace(/<!\-\-(.*(?=\-\->))\-\->/gmi, "") // replace
  .replace(/'/gmi, "\\i")) // encode brackets
  .replace(/\(/g, "%28").replace(/\)/g, "%29");
} // use fs.mkdir to instead of mkpath package, see https://github.com/jrajav/mkpath/issues/6


function mkpath(path, err) {
  return fs.mkdir(path, {
    recursive: true
  }, err);
}

module.exports = url;
